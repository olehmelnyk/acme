name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  actions: read
  contents: read
  checks: write
  statuses: write
  pull-requests: write
  id-token: write # Required for accessing secrets

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  SKIP_SECURITY_CHECKS: ${{ github.event_name == 'pull_request' }}
  NODE_NO_WARNINGS: 1
  VITE_CJS_IGNORE_WARNING: true
  GH_TOKEN: ${{ github.token }}
  NODE_ENV: ci
  NEXT_TELEMETRY_DISABLED: 1
  CI: true
  # Global environment variables for all jobs
  NODE_OPTIONS: '--experimental-vm-modules --experimental-import-meta-resolve'
  NODE_PRESERVE_SYMLINKS: 1
  FORCE_CJS: true
  BUN_VERSION: 1.0.14
  # E2E test configuration
  TEST_CONFIGURATION: ci
  # Retry command script
  RETRY_COMMAND_SCRIPT: |
    #!/bin/bash
    set -euo pipefail

    max_attempts=3
    delay=5
    attempt=1
    command="$@"
    timeout=300  # 5 minutes timeout
    start_time=$(date +%s)

    until eval "${command@Q}"; do
      end_time=$(date +%s)
      elapsed=$((end_time - start_time))
      if ((elapsed >= timeout)); then
        echo "Command timed out after ${elapsed} seconds" >&2
        exit 1
      fi
      if ((attempt >= max_attempts)); then
        echo "Command '${command@Q}' failed after $max_attempts attempts" >&2
        exit 1
      fi
      
      echo "Attempt $attempt failed. Retrying in ${delay} seconds..." >&2
      echo "Command output:"
      eval "${command@Q}" 2>&1 | sed 's/^/  /'
      sleep $delay
      
      delay=$((delay * 2))
      attempt=$((attempt + 1))
    done

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup retry function
        run: |
          echo "${{ env.RETRY_COMMAND_SCRIPT }}" | sudo tee "/usr/local/bin/retry_command"
          sudo chmod +x "/usr/local/bin/retry_command"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.14

      - name: Generate cache key
        id: cache-key
        run: |
          CACHE_KEY="${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}"
          echo "value=${CACHE_KEY}" >> "$GITHUB_OUTPUT"

      - name: Cache Bun dependencies
        uses: actions/cache@v4.3.0
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: "${{ steps.cache-key.outputs.value }}"
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Install dependencies
        run: |
          echo "::group::Install root dependencies"
          "/usr/local/bin/retry_command" "bun install --frozen-lockfile"
          echo "::endgroup::"
          
          echo "::group::Install docs-manager dependencies"
          cd "tools/docs-manager" && "/usr/local/bin/retry_command" "bun install --frozen-lockfile"
          echo "::endgroup::"

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup retry function
        run: |
          echo "${{ env.RETRY_COMMAND_SCRIPT }}" | sudo tee "/usr/local/bin/retry_command"
          sudo chmod +x "/usr/local/bin/retry_command"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4.3.0
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Run linting
        run: |
          # Set Node.js flags to handle ESM/CommonJS compatibility
          export NODE_OPTIONS="--experimental-vm-modules --experimental-import-meta-resolve"

          # Force CommonJS mode for problematic packages
          export FORCE_CJS=true

          # Run nx lint with retry logic
          "/usr/local/bin/retry_command" "bun nx affected -t lint --skip-nx-cache"
        env:
          # Ensure consistent module resolution
          NODE_PRESERVE_SYMLINKS: 1
          # Suppress known ESM warnings
          NODE_NO_WARNINGS: 1

  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['@acme/workspace', 'web', 'docs-fetcher', 'cleanup']
      fail-fast: false
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup retry function
        run: |
          echo "${{ env.RETRY_COMMAND_SCRIPT }}" | sudo tee "/usr/local/bin/retry_command"
          sudo chmod +x "/usr/local/bin/retry_command"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4.3.0
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Configure Git
        run: git fetch origin main

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Run tests
        id: run-tests
        run: |
          echo "Testing project: ${{ matrix.project }}"
          "/usr/local/bin/retry_command" "bun nx test ${{ matrix.project }} --skip-nx-cache"
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-results/html
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: playwright-results/junit.xml

  security:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup retry function
        run: |
          echo "${{ env.RETRY_COMMAND_SCRIPT }}" | sudo tee "/usr/local/bin/retry_command"
          sudo chmod +x "/usr/local/bin/retry_command"

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy Scan
        run: |
          trivy fs --format sarif --output trivy-results.sarif .

      - name: Run Gitleaks Scan
        uses: zricethezav/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          report-format: sarif
          output-file: gitleaks-results.sarif

      - name: Verify Scan Results
        run: |
          if [ ! -f "trivy-results.sarif" ]; then
            echo "::warning::Trivy scan results not found"
            touch trivy-results.sarif
          fi
          if [ ! -f "gitleaks-results.sarif" ]; then
            echo "::warning::Gitleaks scan results not found"
            touch gitleaks-results.sarif
          fi

      - name: Upload Security Reports
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: |
            trivy-results.sarif
            gitleaks-results.sarif

      - name: Upload Trivy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      - name: Upload Gitleaks results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: gitleaks-results.sarif

      - name: Archive security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            gitleaks-results.sarif
          retention-days: 7

  build:
    needs: [setup, lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['web', 'docs']
      fail-fast: false
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup retry function
        run: |
          echo "${{ env.RETRY_COMMAND_SCRIPT }}" | sudo tee "/usr/local/bin/retry_command"
          sudo chmod +x "/usr/local/bin/retry_command"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4.3.0
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Configure Git
        run: git fetch origin main

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Build project
        id: build
        run: |
          echo "Building project: ${{ matrix.project }}"
          # Show current directory and its contents
          pwd
          ls -la
          
          # Create output directory first
          mkdir -p "artifacts/apps/${{ matrix.project }}"
          echo "Created build directory: artifacts/apps/${{ matrix.project }}"
          
          # Run build command with output
          echo "Running build command..."
          "/usr/local/bin/retry_command" "bun nx build ${{ matrix.project }} --skip-nx-cache --verbose"
          
          # List possible build output locations
          echo "Checking common build output locations:"
          ls -la "dist" || echo "No dist directory"
          ls -la "build" || echo "No build directory"
          ls -la "out" || echo "No out directory"
          ls -la "artifacts" || echo "No artifacts directory"

      - name: Verify build output
        run: |
          BUILD_DIR="artifacts/apps/${{ matrix.project }}"
          echo "Checking build directory: ${BUILD_DIR}"
          
          # Show current directory structure
          echo "Current directory structure:"
          pwd
          ls -la
          
          if [ ! -d "${BUILD_DIR}" ]; then
            echo "❌ Build directory ${BUILD_DIR} is missing"
            echo "Available directories in artifacts/apps/:"
            ls -la "artifacts/apps" || echo "artifacts/apps directory not found"
            echo "Available directories in current location:"
            ls -la
            exit 1
          fi
          
          echo "✅ Build directory ${BUILD_DIR} exists and contains:"
          ls -la "${BUILD_DIR}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.project }}
          path: artifacts/apps/${{ matrix.project }}
          retention-days: 1

  e2e:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup retry function
        run: |
          echo "${{ env.RETRY_COMMAND_SCRIPT }}" | sudo tee "/usr/local/bin/retry_command"
          sudo chmod +x "/usr/local/bin/retry_command"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4.3.0
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: build-*
          path: artifacts/apps
          merge-multiple: true

      - name: Configure Git
        run: git fetch origin main

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Install Playwright
        run: |
          "/usr/local/bin/retry_command" "bun playwright install --with-deps"
          "/usr/local/bin/retry_command" "bun playwright install-deps"

      - name: Create artifacts directory
        run: mkdir -p "playwright-results"

      - name: Set test parameters
        id: set-max-parallel
        run: |
          # Calculate optimal parallel jobs (number of cores minus 1)
          CORES=$(nproc)
          # Get available memory in GB
          MEM_GB=$(free -g | awk '/^Mem:/{print $2}')
          
          # Calculate based on both CPU and memory
          CPU_BASED=$((CORES - 1))
          MEM_BASED=$((MEM_GB / 4))  # Assume 4GB per parallel job
          
          # Take the minimum of CPU and memory-based calculations
          MAX_PARALLEL=$((CPU_BASED < MEM_BASED ? CPU_BASED : MEM_BASED))
          
          # Cap at 8 parallel jobs to prevent overload
          if [ "${MAX_PARALLEL}" -gt 8 ]; then
            MAX_PARALLEL=8
          fi
          
          # Ensure at least 1 parallel job
          if [ "${MAX_PARALLEL}" -lt 1 ]; then
            MAX_PARALLEL=1
          fi
          echo "max_parallel=${MAX_PARALLEL}" >> "$GITHUB_OUTPUT"
          echo "Using ${MAX_PARALLEL} parallel jobs (CPU: ${CORES} cores, Memory: ${MEM_GB}GB)"

      - name: Run E2E tests
        run: |
          "/usr/local/bin/retry_command" "bun nx affected -t e2e \
            --skip-nx-cache \
            --parallel=${{ steps.set-max-parallel.outputs.max_parallel }} \
            --max-parallel=${{ steps.set-max-parallel.outputs.max_parallel }} \
            --configuration=${{ env.TEST_CONFIGURATION }}"
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-results/html
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: playwright-results/junit.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: playwright-results/
          retention-days: 30

  docs:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup retry function
        run: |
          echo "${{ env.RETRY_COMMAND_SCRIPT }}" | sudo tee "/usr/local/bin/retry_command"
          sudo chmod +x "/usr/local/bin/retry_command"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4.3.0
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-${{ runner.arch }}-bun-${{ env.BUN_VERSION }}-
            ${{ runner.os }}-${{ runner.arch }}-

      - name: Check documentation formatting
        run: |
          # Run format check with retry
          "/usr/local/bin/retry_command" "bun run format:check"

      - name: Validate documentation
        run: |
          # Run docs validation with retry
          "/usr/local/bin/retry_command" "bun run docs:validate:all"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
