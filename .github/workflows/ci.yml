name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  actions: read
  contents: read
  checks: write
  statuses: write
  pull-requests: write
  id-token: write # Required for accessing secrets

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  SKIP_SECURITY_CHECKS: ${{ github.event_name == 'pull_request' }}
  NODE_NO_WARNINGS: 1
  VITE_CJS_IGNORE_WARNING: true
  GH_TOKEN: ${{ github.token }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14

      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}" >> $GITHUB_OUTPUT

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: |
          for i in 1 2 3; do
            echo "Attempt $i: Installing dependencies..."
            if bun install --frozen-lockfile; then
              echo "Dependencies installed successfully"
              break
            fi
            if [ $i -eq 3 ]; then
              echo "Failed to install dependencies after 3 attempts"
              exit 1
            fi
            echo "Retrying in 5 seconds..."
            sleep 5
          done

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Run lint
        run: bun nx affected -t lint --skip-nx-cache

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Run tests
        run: |
          # Run tests for each project
          for project in "@acme/workspace" "web" "docs-fetcher" "cleanup"; do
            echo "Testing project: $project"
            bun nx test $project --skip-nx-cache || {
              echo "Failed: $project"
              exit 1
            }
          done

  security:
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install security tools
        run: |
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release

          # Install Trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | \
            sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

          # Install Gitleaks via GitHub CLI
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

          gh release download --repo zricethezav/gitleaks --pattern "*linux_x64.tar.gz" --dir /tmp
          cd /tmp && tar -xzf gitleaks*.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks*.tar.gz

      - name: Run security checks
        run: |
          trivy fs --security-checks vuln,config,secret .
          gitleaks detect --verbose

  build:
    needs: [setup, lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Clean build artifacts
        run: |
          rm -rf artifacts/apps/web
          rm -rf .next
          rm -rf .nx/cache
          bun nx reset

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          # Set larger heap for Node
          export NODE_OPTIONS="--max-old-space-size=6144"

          # Run build with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          RETRY_DELAY=10

          until bun nx affected -t build \
            --configuration=production \
            --skip-nx-cache; do
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to build after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Build failed. Retrying in ${RETRY_DELAY} seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
            sleep $RETRY_DELAY
            # Increase delay for each retry
            RETRY_DELAY=$((RETRY_DELAY * 2))
          done
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
          SKIP_SECURITY_CHECKS: true
          NODE_NO_WARNINGS: 1
          VITE_CJS_IGNORE_WARNING: true
          GH_TOKEN: ${{ github.token }}
          NEXT_TELEMETRY_DISABLED: 1

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            artifacts
            dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Update build status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const context = github.context;
              const state = context.job.status === 'success' ? 'success' : 'failure';
              
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: state,
                target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
                description: state === 'success' ? 'Build succeeded' : 'Build failed',
                context: 'CI/build'
              });
            } catch (error) {
              console.warn('Failed to update commit status:', error.message);
              // Don't fail the build if we can't update the status
              if (!error.message.includes('Resource not accessible')) {
                throw error;
              }
            }

  e2e:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Install Playwright
        run: bun playwright install --with-deps
      - name: Run E2E tests
        run: bun nx affected -t e2e --skip-nx-cache

  docs:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Validate documentation formatting
        working-directory: ${{ github.workspace }}
        env:
          SKIP_SECURITY_CHECKS: true
          NODE_NO_WARNINGS: 1
          VITE_CJS_IGNORE_WARNING: true
          GH_TOKEN: ${{ github.token }}
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          RETRY_DELAY=5

          until bun run docs:format:check --dry-run; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to validate docs formatting after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Validation failed. Retrying in ${RETRY_DELAY} seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
            sleep $RETRY_DELAY
            RETRY_DELAY=$((RETRY_DELAY * 2))
          done

      - name: Check documentation cross-references
        working-directory: ${{ github.workspace }}
        env:
          SKIP_SECURITY_CHECKS: true
          NODE_NO_WARNINGS: 1
          VITE_CJS_IGNORE_WARNING: true
          GH_TOKEN: ${{ github.token }}
        run: |
          # Ensure docs directory exists
          mkdir -p docs

          # Run cross-reference check
          MAX_RETRIES=3
          RETRY_COUNT=0
          RETRY_DELAY=5

          until bun run docs:xref --check; do
            # Check if it's a real error or just no markdown files
            if [[ $? -eq 0 ]]; then
              echo "No markdown files found - this is okay for now"
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to check docs cross-references after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Check failed. Retrying in ${RETRY_DELAY} seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
            sleep $RETRY_DELAY
            RETRY_DELAY=$((RETRY_DELAY * 2))
          done

  verify-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            .next
            dist
            build
            artifacts
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Verify build artifacts
        run: |
          # Check if critical files/directories exist
          for dir in ".next" "dist" "build" "artifacts"; do
            if [ -d "$dir" ]; then
              echo "✓ $dir exists"
            else
              echo "✗ $dir is missing"
              exit 1
            fi
          done

# Add at the top level of the workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
