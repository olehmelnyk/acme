name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read
  id-token: write # Required for accessing secrets

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  SKIP_SECURITY_CHECKS: ${{ github.event_name == 'pull_request' }}
  NODE_NO_WARNINGS: 1
  VITE_CJS_IGNORE_WARNING: true
  GH_TOKEN: ${{ github.token }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14

      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}" >> $GITHUB_OUTPUT

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: |
          for i in 1 2 3; do
            echo "Attempt $i: Installing dependencies..."
            if bun install --frozen-lockfile; then
              echo "Dependencies installed successfully"
              break
            fi
            if [ $i -eq 3 ]; then
              echo "Failed to install dependencies after 3 attempts"
              exit 1
            fi
            echo "Retrying in 5 seconds..."
            sleep 5
          done

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Run lint
        run: bun nx affected -t lint --skip-nx-cache

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Run tests
        run: |
          # Run tests for each project
          for project in "@acme/workspace" "web" "docs-fetcher" "cleanup"; do
            echo "Testing project: $project"
            bun nx test $project --skip-nx-cache || {
              echo "Failed: $project"
              exit 1
            }
          done

  security:
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install security tools
        run: |
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release

          # Install Trivy
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | \
            sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

          # Install Gitleaks via GitHub CLI
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

          gh release download --repo zricethezav/gitleaks --pattern "*linux_x64.tar.gz" --dir /tmp
          cd /tmp && tar -xzf gitleaks*.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks*.tar.gz

      - name: Run security checks
        run: |
          trivy fs --security-checks vuln,config,secret .
          gitleaks detect --verbose

  build:
    needs: [setup, lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Build
        run: |
          # Install dependencies first
          bun install
          
          # Clean NX cache
          bun nx reset
          
          # Create empty workspace.json if it doesn't exist
          echo '{"version": 2, "projects": {}}' > workspace.json
          
          # Build web project directly with next
          cd apps/web
          bun run build
          cd ../..
          
          # Run affected builds for other projects
          bun nx affected -t build --exclude=web

  e2e:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Install Playwright
        run: bun playwright install --with-deps
      - name: Run E2E tests
        run: bun nx affected -t e2e --skip-nx-cache

  docs:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Validate documentation formatting
        run: bun run docs:format:check format --dry-run
      - name: Check documentation cross-references
        run: bun run docs:xref --check
