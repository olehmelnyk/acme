name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  actions: read
  contents: read
  checks: write
  statuses: write
  pull-requests: write
  id-token: write # Required for accessing secrets

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  SKIP_SECURITY_CHECKS: ${{ github.event_name == 'pull_request' }}
  NODE_NO_WARNINGS: 1
  VITE_CJS_IGNORE_WARNING: true
  GH_TOKEN: ${{ github.token }}
  NODE_ENV: ci
  NEXT_TELEMETRY_DISABLED: 1
  CI: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14

      - name: Generate cache key
        id: cache-key
        run: |
          LOCKFILE_HASH="${{ hashFiles('**/bun.lockb') }}"
          WORKFLOW_HASH="${{ hashFiles('.github/workflows/**') }}"
          echo "value=${{ runner.os }}-bun-$LOCKFILE_HASH-$WORKFLOW_HASH" >> "$GITHUB_OUTPUT"

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          RETRY_DELAY=5
          for i in 1 2 3; do
            echo "Attempt $i: Installing dependencies..."
            if bun install --frozen-lockfile; then
              echo "Dependencies installed successfully"
              break
            fi
            if [ $i -eq 3 ]; then
              echo "Failed to install dependencies after 3 attempts"
              exit 1
            fi
            echo "Retrying in ${RETRY_DELAY} seconds..."
            sleep ${RETRY_DELAY}
            RETRY_DELAY=$((RETRY_DELAY * 2))
          done

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-
            ${{ runner.os }}-
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Run lint
        run: bun nx affected -t lint --skip-nx-cache

  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ["@acme/workspace", "web", "docs-fetcher", "cleanup"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-
            ${{ runner.os }}-

      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Run tests
        id: run-tests
        run: |
          echo "Testing project: ${{ matrix.project }}"
          bun nx test ${{ matrix.project }} --skip-nx-cache
        env:
          # Increase Node.js memory limit for large builds
          NODE_OPTIONS: "--max-old-space-size=4096"
          
          # Skip security checks in CI environment since they're handled in a separate job
          SKIP_SECURITY_CHECKS: true
          
          # Suppress Node.js warnings:
          # - ExperimentalWarning: Custom ESM Loaders is an experimental feature
          # - ExperimentalWarning: --experimental-loader is an experimental feature
          # These warnings are expected when using Bun with Next.js and don't indicate issues
          NODE_NO_WARNINGS: 1
          
          # Suppress Vite CJS warnings:
          # - "The CJS build of Vite's Node API is deprecated"
          # This warning appears due to some dependencies not yet updated to ESM
          # Safe to ignore as we're using Vite through Next.js/React configuration
          VITE_CJS_IGNORE_WARNING: true

  security:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install security tools
        run: |
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release

          # Install Trivy with version pinning
          TRIVY_VERSION="0.47.0"
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --batch --yes --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | \
            sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy=${TRIVY_VERSION}

          # Install Gitleaks with version pinning and checksum verification
          GITLEAKS_VERSION="v8.18.1"
          
          # Download Gitleaks binary and checksums
          wget -q https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz -O /tmp/gitleaks.tar.gz
          wget -q https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_checksums.txt -O /tmp/gitleaks_checksums.txt
          
          # Verify checksum
          cd /tmp
          sha256sum --check --ignore-missing <(grep linux_x64.tar.gz gitleaks_checksums.txt)
          
          # Install Gitleaks
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          sudo chmod +x /usr/local/bin/gitleaks
          
          # Clean up
          rm gitleaks.tar.gz gitleaks_checksums.txt
          
          # Verify installations
          echo "Verifying installations..."
          trivy --version
          gitleaks version

      - name: Run security checks
        run: |
          # Run Trivy with configuration
          trivy fs \
            --security-checks vuln,config,secret \
            --severity HIGH,CRITICAL \
            --exit-code 1 \
            --timeout 10m \
            --ignorefile .trivyignore \
            --format sarif \
            --output trivy-results.sarif .

          # Run Gitleaks with configuration
          gitleaks detect \
            --verbose \
            --report-format sarif \
            --report-path gitleaks-results.sarif \
            --config .gitleaks.toml

      - name: Upload Trivy results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      - name: Upload Gitleaks results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gitleaks-results.sarif
          category: gitleaks

      - name: Archive security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            gitleaks-results.sarif
          retention-days: 7

  build:
    needs: [setup, lint, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
      fail-fast: false
    env:
      BUILD_ENV: production
      NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}
      NEXT_PUBLIC_APP_ENV: production
      ENABLE_SOURCE_MAPS: true
      ANALYZE_BUNDLE: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-
            ${{ runner.os }}-

      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'

      - name: Clean build artifacts
        run: |
          rm -rf artifacts/apps/web
          rm -rf .next
          rm -rf .nx/cache
          rm -rf node_modules/.cache
          bun nx reset

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
          # Set larger heap for Node
          export NODE_OPTIONS="--max-old-space-size=6144"

          # Ensure Nx workspace is properly initialized
          bun nx reset

          # Run build with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          RETRY_DELAY=10

          until bun nx build web \
            --configuration=production \
            --skip-nx-cache \
            --verbose \
            --source-maps=$ENABLE_SOURCE_MAPS \
            --bundle-analyzer=$ANALYZE_BUNDLE; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to build after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Build failed. Retrying in ${RETRY_DELAY} seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
            sleep $RETRY_DELAY
            # Clean up before retry
            rm -rf artifacts/apps/web
            rm -rf .next
            bun nx reset
            # Increase delay for each retry
            RETRY_DELAY=$((RETRY_DELAY * 2))
          done
        env:
          NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
          SKIP_SECURITY_CHECKS: true
          NODE_NO_WARNINGS: 1
          VITE_CJS_IGNORE_WARNING: true
          GH_TOKEN: ${{ github.token }}
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: |
            artifacts/apps/web/.next
            artifacts/apps/web/public
          retention-days: 7
          if-no-files-found: error

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            artifacts/apps/web/.next
            artifacts/apps/web/public
          key: ${{ runner.os }}-build-${{ github.sha }}-${{ env.BUILD_ENV }}
          restore-keys: |
            ${{ runner.os }}-build-${{ github.sha }}-
            ${{ runner.os }}-build-

  e2e:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-
            ${{ runner.os }}-
      - name: Configure Git
        run: |
          git fetch origin main:main || git fetch origin master:main
      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'main'
      - name: Install Playwright
        run: |
          bun playwright install --with-deps
          # Install additional browser dependencies
          bun playwright install-deps

      - name: Create artifacts directory
        run: mkdir -p playwright-results

      - name: Run E2E tests
        run: |
          bun nx affected -t e2e \
            --skip-nx-cache \
            --parallel=3 \
            --max-parallel=3 \
            --configuration=ci \
            --retries=2
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-results/html
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: playwright-results/junit.xml
          # Increase timeout for CI environment
          PLAYWRIGHT_TIMEOUT: 60000
          # Enable video recording for failed tests
          PLAYWRIGHT_VIDEO: "retain-on-failure"
          # Enable trace for failed tests
          PLAYWRIGHT_TRACE: "retain-on-failure"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            playwright-results/
            **/test-results/
            **/playwright-report/
          retention-days: 30

  docs:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.0.14
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            .nx/cache
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-
            ${{ runner.os }}-

      - name: Validate documentation formatting
        working-directory: ${{ github.workspace }}
        env:
          SKIP_SECURITY_CHECKS: true
          NODE_NO_WARNINGS: 1
          VITE_CJS_IGNORE_WARNING: true
          GH_TOKEN: ${{ github.token }}
        run: |
          MAX_RETRIES=3
          RETRY_COUNT=0
          RETRY_DELAY=5

          until bun run docs:format:check --dry-run; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to validate docs formatting after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Validation failed. Retrying in ${RETRY_DELAY} seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
            sleep $RETRY_DELAY
            RETRY_DELAY=$((RETRY_DELAY * 2))
          done

      - name: Check documentation cross-references
        working-directory: ${{ github.workspace }}
        env:
          SKIP_SECURITY_CHECKS: true
          NODE_NO_WARNINGS: 1
          VITE_CJS_IGNORE_WARNING: true
          GH_TOKEN: ${{ github.token }}
        run: |
          # Ensure docs directory exists
          mkdir -p docs

          echo "Running documentation cross-reference check..."
          echo "Current directory: $(pwd)"
          echo "Docs directory contents:"
          ls -la docs/

          # Run cross-reference check with debug output
          MAX_RETRIES=3
          RETRY_COUNT=0
          RETRY_DELAY=5

          until bun run docs:xref --check --verbose; do
            EXIT_CODE=$?
            
            # Check if it's a real error or just no markdown files
            if [[ $EXIT_CODE -eq 0 ]]; then
              echo "No markdown files found or all references are valid"
              break
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to check docs cross-references after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Check failed. Retrying in ${RETRY_DELAY} seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
            sleep $RETRY_DELAY
            RETRY_DELAY=$((RETRY_DELAY * 2))
          done

  verify-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore build artifacts
        uses: actions/cache/restore@v4
        with:
          path: |
            .next
            dist
            build
            artifacts
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Verify build artifacts
        run: |
          # Check if critical files/directories exist
          for dir in ".next" "dist" "build" "artifacts"; do
            if [ -d "$dir" ]; then
              echo "$dir exists"
            else
              echo "$dir is missing"
              exit 1
            fi
          done

# Add at the top level of the workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
